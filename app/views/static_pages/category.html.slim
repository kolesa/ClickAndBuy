.section.slice.bg-3
  .w-section.inverse.container
    .col-lg-6
      h1 info

    .col-lg-6
      h1 style="display: inline-block;" Categories

      a.text-right href="#" style="float: right; margin: 40px 40px 0 0;" data-target="#category" data-toggle="modal"
        | add
        span.fa.fa-plus<>

      #category.modal.fade aria-hidden="true" aria-labelledby="categoryLabel" role="dialog" tabindex="-1"
          .modal-dialog
            .modal-content
              .modal-header
                button.close aria-hidden="true" data-dismiss="modal" type="button"
                h4#categoryLabel.modal-title Add category
              .modal-body
                input.add_category_input style="margin: 10px"
                button.btn.btn-default data-dismiss="modal" type="button" cancel
                button.btn.btn-primary.add_category href="#" type="button" data={url: category_sort_add_path}
                  | add

      - if !@categories.empty?
          ol.category data={update_url: category_sort_path}
            - @categories.each do |category|
              == render "shared/category_edit", { category: category, main: true }

  javascript:
    $(".add_category").click(function(){
      $.post($(this).data('url'), {tag: $("input.add_category_input").val() });
      location.reload();
    });

    $(".display").click(function(){

      $(this).hide().siblings(".edit").show().val($(this).text()).focus();
    });

    $(".edit").focusout(function(){
      $(this).hide().siblings(".display").show().text($(this).val());
      $.post($(this).data('url'), {id: $(this).parent().data("id"), tag: $(this).val() });
    });

    $("a#category_delete").click(function(i){
      $.post($(this).data('url'), {id: $(this).data("id")});
      $(this).parent().parent().detach();
    });

    $(function  () {
      var cat = $("ol.category").sortable({
        group: 'category',
        //handle: 'i.fa.fa-arrows',
        // animation on drop
        onDrop: function  (item, container, _super) {
          var clonedItem = $('<li />').css({height: 0})
          item.before(clonedItem)
          clonedItem.animate({'height': item.height()})
          
          item.animate(clonedItem.position(), function  () {
            clonedItem.detach()
            _super(item)
          });
          
          var order = Array();

          $("ol.category > li").each(function(i,elem){
            var current_category = $(this);
            var childrens = $(this).children('ol.category_child');

            if ( childrens.children().length > 0 ){
              childrens.children('li').each( function(){
                parent_id = $(this).parent().parent().data('id');
                $(this).data('id') ? order.push( [$(this).data("id"), parent_id, i] ) : null
              });
            }
            var parent_id = 0;
            $(this).data('id') ? order.push( [$(this).data("id"), parent_id, i] ) : null
          });

          //console.log( order )
          $.post($('ol.category').data('update-url'), {order: order});

        },

        // set item relative to cursor position
        onDragStart: function ($item, container, _super) {
          var offset = $item.offset(),
          pointer = container.rootGroup.pointer

          adjustment = {
            left: pointer.left - offset.left,
            top: pointer.top - offset.top
          }

          _super($item, container)
        },
        onDrag: function ($item, position) {
          $item.css({
            left: position.left - adjustment.left,
            top: position.top - adjustment.top
          })
        },
        serialize: function ($parent, $children, parentIsContainer) {
          var result = $.extend({}, $parent.data())

          if(parentIsContainer){
            return $children
          }
          else if ($children[0]){
            result.children = $children
            delete result.subContainer.containers[0].el
          }

          console.log(result)
        }
        /*function (parent, children, isContainer) {
          return isContainer ? children.join() : parent.text()
        }*/
      })
    })
    ;